name: 📝 Knowledge Automation

# トリガー: PRコメントが投稿されたとき
on:
  issue_comment:
    types: [created]

# 権限設定
permissions:
  contents: write
  pull-requests: read

jobs:
  process-must-comment:
    # 実行条件:
    # 1. PRに紐づくコメントであること
    # 2. コメント本文が[must]で始まること
    if: |
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '[must]')
    
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: リポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # PRのブランチをチェックアウト
          ref: ${{ github.event.issue.pull_request.head.ref }}
          # プッシュするためにトークンを設定
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # Step 2: Node.js環境をセットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      # Step 3: 依存関係をインストール
      - name: Install dependencies
        run: npm ci
      
      # Step 4: PRブランチ名を取得
      - name: Get PR branch name
        id: pr-branch
        run: |
          PR_NUMBER=${{ github.event.issue.number }}
          BRANCH=$(gh pr view $PR_NUMBER --json headRefName --jq .headRefName)
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Step 5: Mastraアプリケーションを実行
      - name: Run Knowledge Automation
        run: npm run mastra:run
        env:
          # GitHub Secretsから取得
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          # イベントペイロードから抽出
          COMMENT_BODY: ${{ github.event.comment.body }}
          COMMENT_URL: ${{ github.event.comment.html_url }}
          PR_BRANCH: ${{ steps.pr-branch.outputs.branch }}
          TIMESTAMP: ${{ github.event.comment.created_at }}
          # Git操作用
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
      
      # Step 6: 成功通知（オプション）
      - name: Comment success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ ナレッジベースに自動追加しました！\n\n変更内容は `agents/policy.md` を確認してください。'
            })
      
      # Step 7: 失敗通知
      - name: Comment failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ ナレッジ自動追加に失敗しました。\n\n詳細は[ワークフロー実行ログ](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})を確認してください。'
            })
